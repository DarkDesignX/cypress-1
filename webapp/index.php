<?php $page_title = "Home â˜… Productive"; ?>
<?php require "view/blocks/page_start.php"; ?>
<h1>Welcome to Productive!</h1>

<h2>Our most popular products</h2>

<!-- Plain JS implementation -->
<div style="margin-bottom: 1em;">
  <label for="category-filter">Nach Kategorie filtern: </label>
  <select id="category-filter" name="category-filter">
    <option value="">Kein Filter</option>
  </select>
</div>

<table>
  <thead>
    <tr>
      <th>Name</th>
      <th>Price</th>
      <th>Stock</th>
    </tr>
  </thead>
  <tbody id="products-table">
    <!-- the table rows are generated by the JS below -->
  </tbody>
</table>

<script>
const fetchProducts = async function () {
  const result = await fetch('API/V1/popular-products')
  return await result.json()
}

const fetchCategories = async function () {
  const result = await fetch('API/V1/Categories')
  const categories = await result.json()
  return categories.filter((category) => category.active === "1") // only return the active categories
}

const updateProductTable = async function (table, productsToInsert) {
  const columns = ['name', 'price', 'stock'];

  // Insert the table rows for the found products
  const newTableRows = productsToInsert.map((product) => {
    const tr = document.createElement('tr');

    const tds = columns.map((column) => {
      const td = document.createElement('td');
      td.innerText = product[column]; // types the value of the product into the cell (ex. the price of the product)
      tr.appendChild(td);
    })

    return tr
  })

  table.replaceChildren(...newTableRows)
}

const init = async function () { // an async wrapper function which allows me to use await instead of .then()
  // HTML nodes
  const table = document.querySelector('#products-table');
  const categorySelect = document.querySelector('#category-filter');

  // Fetch the data from the backend
  const products = await fetchProducts()
  const categories = await fetchCategories()

  // This event listener filters the products if the filter is changed
  categorySelect.addEventListener('change', (event) => {
    const categoryId = event.target.value;

    const filteredProducts = categoryId
      ? products.filter((product) => product.id_category === categoryId)
      : products;

    updateProductTable(table, filteredProducts);
  })

  // Build the select options
  categories.forEach((category) => {
    const option = document.createElement('option');
    option.value = category.category_id;
    option.text = category.name;
    categorySelect.appendChild(option);
  })

  // Add found products to product table
  updateProductTable(table, products);
 
}

init();
</script>

<?php require "view/blocks/page_end.php"; ?>